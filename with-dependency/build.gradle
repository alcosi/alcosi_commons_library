import com.github.jk1.license.LicenseReportExtension
import com.alcosi.lib.license_report.GroupedJsonReport

buildscript {
    repositories {
        maven {
            name = "GitHub"
            url = uri("https://maven.pkg.github.com/alcosi/alcosi_commons_library")
            credentials {
                username = "${System.getenv()["GIHUB_PACKAGE_USERNAME"]}"
                password = "${System.getenv()["GIHUB_PACKAGE_TOKEN"]}"
            }
        }
    }
    dependencies {
        classpath("com.alcosi:report-group-plugin:1.4")
    }
}
plugins {
    id("java-library")
    id("maven-publish")
    id("org.springframework.boot") version "3.2.3"
    id("io.spring.dependency-management") version "1.1.4"
    id("org.jetbrains.kotlin.jvm") version "1.9.22"
    id("org.jetbrains.kotlin.plugin.spring") version "1.9.22"
    id("com.github.jk1.dependency-license-report") version "2.5"
}

def appName = 'commons-library-basic-dependency'
def springVersion = '3.2.3'
def kotlinVersion = '1.9.22'
def jacksonVersion = '2.16.0'
def depVersion = "3.3.19"
def kotlinCoroutinesVersion = "1.7.3"

group = 'com.alcosi'
version = "${springVersion}.${depVersion}"
sourceCompatibility = "21"
publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/alcosi/alcosi_commons_library")
            credentials {
                username = "$System.env.GIHUB_PACKAGE_USERNAME"
                password = "$System.env.GIHUB_PACKAGE_TOKEN"
            }
        }
    }
    publications {
        dep(MavenPublication) { publication ->
            groupId = group
            artifactId = appName
            version = version
            from components.java
            pom {
                licenses {
                    license {
                        name = "The MIT License"
                        url = "http://opensource.org/licenses/MIT"
                    }
                }
            }
        }
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}
java {
    withSourcesJar()
}

bootJar {
    enabled = false
}
jar {
    enabled = true
}
compileKotlin {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
    kotlinOptions {
        jvmTarget = "21"
    }
}

repositories {
    mavenCentral()
    gradlePluginPortal()
    maven {
        name = "GitHub"
        url = uri("https://maven.pkg.github.com/alcosi/alcosi_commons_library")
        credentials {
            username = "$System.env.GIHUB_PACKAGE_USERNAME"
            password = "$System.env.GIHUB_PACKAGE_TOKEN"
        }

    }

}

configurations {
    configureEach {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
        exclude module: 'logback-classic'
        exclude module: "spring-boot-starter-logging"
        exclude module: "spring-boot-starter-tomcat"
    }
}


dependencies {
    api("com.alcosi:commons-library-logging:$depVersion")
    api("org.apache.logging.log4j:log4j-api-kotlin:1.3.0")
    api("jakarta.servlet:jakarta.servlet-api:6.0.0")
    api("javax.annotation:javax.annotation-api:1.3.2")
    api("commons-io:commons-io:2.15.1")
    api("org.apache.commons:commons-lang3:3.14.0")
    api("commons-codec:commons-codec:1.16.0")
    api("org.apache.commons:commons-text:1.11.0")
    api("org.bouncycastle:bcprov-jdk18on:1.77")
    api("org.postgresql:postgresql:42.7.2")
    api("org.flywaydb:flyway-core:10.4.1")
    api("org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion")
    api("org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion")
    api("org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinCoroutinesVersion")
    api("org.springframework.boot:spring-boot-starter-web:$springVersion")
    api("org.springframework.boot:spring-boot-starter-jetty:$springVersion")
    api("org.springframework.boot:spring-boot-starter:$springVersion")
    api("org.springframework.boot:spring-boot-starter-jdbc:$springVersion")
    api("org.springframework.boot:spring-boot-starter-log4j2:$springVersion")
    api("org.springframework.boot:spring-boot-starter-aop:$springVersion")
    api("org.springframework.boot:spring-boot-starter-actuator:$springVersion")
    api("org.springframework.boot:spring-boot-starter-jetty:$springVersion")
    api("com.fasterxml.jackson.module:jackson-module-kotlin:$jacksonVersion")
    api("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jacksonVersion")
}


licenseReport {
    unionParentPomLicenses = true
    outputDir = "$projectDir/reports/license"
    configurations = LicenseReportExtension.ALL
    excludeGroups = ["do.not.want"]
    excludes = ["moduleGroup:moduleName"]
    excludeOwnGroup = true
    excludeBoms = false
    renderers = [new GroupedJsonReport("group-report.json", false, true)]
    allowedLicensesFile = new File("$projectDir/config/allowed-licenses.json")
}