import com.alcosi.lib.license_report.GroupedJsonReport
import com.github.jk1.license.LicenseReportExtension

buildscript {
    repositories {
        maven {
            name = "GitHub"
            url = uri("https://maven.pkg.github.com/alcosi/alcosi_commons_library")
            credentials {
                username = "${System.getenv()["GIHUB_PACKAGE_USERNAME"]}"
                password = "${System.getenv()["GIHUB_PACKAGE_TOKEN"]}"
            }
        }
    }
    dependencies {
        classpath("com.alcosi:report-group-plugin:1.4")
    }
}
plugins {
    id("java-library")
    id("maven-publish")
    id("org.springframework.boot") version "3.2.2"
    id("io.spring.dependency-management") version "1.1.4"
    id("org.jetbrains.kotlin.jvm") version "1.9.22"
    id("org.jetbrains.kotlin.plugin.spring") version "1.9.22"
    id("com.github.jk1.dependency-license-report") version "2.5"
    id("com.github.ben-manes.versions") version "0.50.0"
}

group = 'com.alcosi'
version = '3.3.17'
sourceCompatibility = "21"
def appName = 'commons-library'

def jacksonVersion = '2.16.1'
def web3jVersion = '4.10.3'
java {
    withSourcesJar()
}
publishing {
    repositories {

        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/alcosi/alcosi_commons_library")
            credentials {
                username = "$System.env.GIHUB_PACKAGE_USERNAME"
                password = "$System.env.GIHUB_PACKAGE_TOKEN"
            }
        }

    }
    publications {
        myLib(MavenPublication) {
            from components.java
            pom {
                licenses {
                    license {
                        name = "The MIT License"
                        url = "http://opensource.org/licenses/MIT"
                    }
                }
            }
        }
    }
}


configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}
compileKotlin {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
    kotlinOptions {
        jvmTarget = "21"
    }
}
compileJava.dependsOn(processResources)
compileKotlin.dependsOn(processResources)

repositories {
    mavenCentral()
    maven {
        name = "GradlePlugins"
        url = uri("https://plugins.gradle.org/m2/")
    }
}

configurations {
    implementation {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
        exclude module: 'logback-classic'
        exclude module: "spring-boot-starter-logging"
        exclude module: "spring-boot-starter-tomcat"
    }
    testImplementation.extendsFrom compileOnly
}


dependencies {
    compileOnly("jakarta.servlet:jakarta.servlet-api:6.0.0")
    compileOnly("javax.annotation:javax.annotation-api:1.3.2")
    compileOnly("commons-io:commons-io:2.15.1")
    compileOnly("org.apache.commons:commons-lang3:3.14.0")
    compileOnly("commons-codec:commons-codec:1.16.0")
    compileOnly("org.apache.commons:commons-text:1.11.0")
    compileOnly("org.bouncycastle:bcprov-jdk18on:1.77")
    compileOnly("com.squareup.okhttp3:okhttp:4.12.0")
    compileOnly("org.postgresql:postgresql:42.7.2")
    compileOnly("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jacksonVersion")
    compileOnly("org.web3j:crypto:$web3jVersion")
    compileOnly("org.web3j:core:$web3jVersion")
    compileOnly("org.jetbrains.kotlin:kotlin-reflect")
    compileOnly("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    compileOnly("org.springframework.boot:spring-boot-starter-web")
    compileOnly("org.springframework.boot:spring-boot-starter")
    compileOnly("org.springframework.boot:spring-boot-starter-amqp")
    compileOnly("org.springframework.boot:spring-boot-starter-jdbc")
    compileOnly("org.springframework.boot:spring-boot-starter-aop")
    compileOnly("org.springframework.boot:spring-boot-starter-actuator")
    compileOnly("com.fasterxml.jackson.module:jackson-module-kotlin")
    compileOnly("org.apache.logging.log4j:log4j-core")
    annotationProcessor("org.apache.logging.log4j:log4j-core")
    annotationProcessor("org.springframework.boot:spring-boot-autoconfigure-processor")
    annotationProcessor("org.springframework.boot:spring-boot-configuration-processor")
    testImplementation("org.springframework.boot:spring-boot-starter-test")
    testImplementation("org.mockito:mockito-core:5.8.0")
}

test {
    jvmArgs("-Xmx1024m")
    useJUnitPlatform()
}

licenseReport {
    // By default this plugin will collect the union of all licenses from
    // the immediate pom and the parent poms. If your legal team thinks this
    // is too liberal, you can restrict collected licenses to only include the
    // those found in the immediate pom file
    // Defaults to: true
    unionParentPomLicenses = true

    // Set output directory for the report data.
    // Defaults to ${project.buildDir}/reports/dependency-license.
    outputDir = "$projectDir/reports/license"

    // Select projects to examine for dependencies.
    // Defaults to current project and all its subprojects
//    projects = [project] + project.subprojects

    // Adjust the configurations to fetch dependencies. Default is 'runtimeClasspath'
    // For Android projects use 'releaseRuntimeClasspath' or 'yourFlavorNameReleaseRuntimeClasspath'
    // Use 'ALL' to dynamically resolve all configurations:
    // configurations = ALL
    configurations = LicenseReportExtension.ALL
//    configurations = ['runtimeClasspath']
    excludeGroups = ["do.not.want"]

    // List the ids (in module:name format) to exclude from dependency report. Supports regular expressions.
    // By default excludes is empty.
    excludes = ["moduleGroup:moduleName"]

    // Don't include artifacts of project's own group into the report
    excludeOwnGroup = true

    // Don't exclude bom dependencies.
    // If set to true, then all boms will be excluded from the report
    excludeBoms = false

    // Set custom report renderer, implementing ReportRenderer.
    // Yes, you can write your own to support any format necessary.
    renderers = [new GroupedJsonReport("group-report.json", false, true)]

    // Set importers to import any external dependency information, i.e. from npm.
    // Custom importer should implement DependencyDataImporter interface.

    // This is for the allowed-licenses-file in checkLicense Task
    // Accepts File, URL or String path to local or remote file
    allowedLicensesFile = new File("$projectDir/config/allowed-licenses.json")
}